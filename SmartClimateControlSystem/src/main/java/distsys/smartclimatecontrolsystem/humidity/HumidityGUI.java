package distsys.smartclimatecontrolsystem.humidity;

import generated.grpc.humidity.HumidityControlGrpc;
import generated.grpc.humidity.HumidityControlOuterClass.HumidityRequest;
import generated.grpc.humidity.HumidityControlOuterClass.StatusResponse;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;
import java.util.ArrayList;
import java.util.List;

/**
 * GUI for controlling humidity values using client-streaming.
 * Allows the user to input multiple humidity readings.
 * 
 * @author guilhermesilveira
 */
public class HumidityGUI extends javax.swing.JFrame {
    
    private HumidityControlGrpc.HumidityControlStub asyncStub;
    private List<Float> humidityQueue = new ArrayList<>();

    // Creates new form HumidityGUI
    public HumidityGUI() {
        initComponents();
        txtHumidity.requestFocusInWindow();
        setTitle("Smart Climate Control â€“ Humidity Control");
        
        // Create gRPC channel ans async stub
        ManagedChannel channel = ManagedChannelBuilder
            .forAddress("localhost", 50052)
            .usePlaintext()
            .build();

        asyncStub = HumidityControlGrpc.newStub(channel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtHumidity = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtQueue = new javax.swing.JTextArea();
        btnSendAll = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Enter Humidity (%):");

        txtHumidity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHumidityActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        txtQueue.setColumns(20);
        txtQueue.setRows(5);
        jScrollPane1.setViewportView(txtQueue);

        btnSendAll.setText("Send All");
        btnSendAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendAllActionPerformed(evt);
            }
        });

        txtOutput.setColumns(20);
        txtOutput.setRows(5);
        jScrollPane2.setViewportView(txtOutput);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHumidity)
                        .addGap(18, 18, 18)
                        .addComponent(btnAdd))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSendAll)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)))
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtHumidity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(btnSendAll))
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Add humidity value to the queue
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            float value = Float.parseFloat(txtHumidity.getText());
            humidityQueue.add(value);
            txtQueue.append("Queued: " + value + "%\n");
            txtHumidity.setText("");
        } catch (NumberFormatException ex) {
            txtQueue.append("Invalid humidity value.\n");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    // Send all queued humidity values to the server via gRPC streaming
    private void btnSendAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendAllActionPerformed
        if (humidityQueue.isEmpty()){
            txtOutput.append("Queue is empty. Nothing to send.\n");
            return;
        }
        
        txtOutput.append("Sending humidity values to server...\n");

        StreamObserver<StatusResponse> responseObserver = new StreamObserver<StatusResponse>() {
            @Override
            public void onNext(StatusResponse response) {
                txtOutput.append("Server Response: " + response.getMessage() + "\n");
            }

            @Override
            public void onError(Throwable t) {
                String errorMessage = t.getMessage();
                if (errorMessage.contains("UNAVAILABLE")) {
                    txtOutput.append("Server is not running or unreachable. Please start the server.\n");
                } else {
                    txtOutput.append("Error: " + errorMessage + "\n");
                }
            }

            @Override
            public void onCompleted() {
                txtOutput.append("Stream completed.\n");
            }
        };

        // Create request stream and send each value
        try {
            StreamObserver<HumidityRequest> requestObserver = asyncStub.setHumidityLevel(responseObserver);

            for (float humidity : humidityQueue) {
                HumidityRequest request = HumidityRequest.newBuilder()
                    .setHumidity(humidity)
                    .build();
                requestObserver.onNext(request);
            }
            // Complete the stream and clear the queue
            requestObserver.onCompleted();
            humidityQueue.clear();
            txtQueue.append("Queue cleared.\n");
            
        } catch (Exception e) {
            txtOutput.append("Unexpected error: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnSendAllActionPerformed

    private void txtHumidityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHumidityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHumidityActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HumidityGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HumidityGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HumidityGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HumidityGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HumidityGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnSendAll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtHumidity;
    private javax.swing.JTextArea txtOutput;
    private javax.swing.JTextArea txtQueue;
    // End of variables declaration//GEN-END:variables
}
